bool colision (Point a, int n, Point b, int m){
	Point b_left_down = {b.x, b.y+m};
	Point b_right_down = {b.x +m, b.y+m};
	Point b_right_up = {b.x +m, b.y};
	if (!contain(a, n ,b) && !contain(a, n ,b_left_down)&& !contain(a, n ,b_right_down)&& !contain(a, n ,b_right_up))
		return false;
	return true;		
}

bool contain (Point a, int n, Point b, int m){
	if (intersects (a.x, n, b.x, m)&& intersects (a.y, n, b.y, m))
		return true;
	return false;
}
"3.254"

float aTof (char* str){
	int size = strlen(str);
	if(size==0)return 0;
	int sign= str[0]== '-'?-1:1;
	if(sign == -1) {
	str = str+1;
	size--;
	}
	float result=0;
	int point findPoint(str);
	if(point == -1){
		return atoi (str, size)*sign;
	}
	else{ 
		result += atoi(str,point);
		result += rtoi(str +point+1, size-point -1);
		return result*sign;
	}
}

int atoi(char* str, int size){
int i;
int m=1;
int temp;
int result=0;
for (i=size-1; i>=0;i--){
	temp = str[i]-'0';
	temp*m;
	result += temp;
	m*=10;
}
return result;
}


float rtoi (char* str, int size){
	int i;
	float m = 0.1;
	float temp;
	float result=0;
	for (i=0; i<size,i++){
	temp = str[i]-'0';
	temp*=m;
	result += temp;
	m/=10;
	}
	return result;
}


bool intersects (int a, int b, int size_a, int size_b){
 if (b <= a+size_a && a<= b+size_b)
	 return true;
 return false;
}